{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75e0f5dd-323d-43b2-b5a5-d30b87d2eaef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f05e9887-9752-494f-b4a4-276cd11bf650",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "add_arrays_loop()\n",
      "\n",
      "a[i] + b[i] = 1 + 5 = 6\n",
      "a[i] + b[i] = 2 + 6 = 8\n",
      "a[i] + b[i] = 3 + 7 = 10\n",
      "a[i] + b[i] = 4 + 8 = 12\n",
      "\n",
      "\n",
      "add_arrays_vectorized function()\n",
      "\n",
      "a + b = [1 2 3 4] + [5 6 7 8] = [ 6  8 10 12]\n"
     ]
    }
   ],
   "source": [
    "# # Non-vectorized approach (slow)\n",
    "def add_arrays_loop(a, b):\n",
    "    print('add_arrays_loop()\\n')\n",
    "    result = np.empty_like(a)\n",
    "    for i in range(len(a)):\n",
    "        result[i] = a[i] + b[i]\n",
    "        print(f'a[i] + b[i] = {a[i]} + {b[i]} = {result[i]}')\n",
    "    return result\n",
    "\n",
    "# Vectorized approach (fast)\n",
    "def add_arrays_vectorized(a, b):\n",
    "    print('\\n\\nadd_arrays_vectorized function()\\n')\n",
    "    print(f'a + b = {a} + {b} = {a + b}')\n",
    "    return a + b\n",
    "\n",
    "# Usage\n",
    "a = np.array([1, 2, 3, 4])\n",
    "b = np.array([5, 6, 7, 8])\n",
    "\n",
    "result_non_vectorized = add_arrays_loop(a, b)\n",
    "result_vectorized = add_arrays_vectorized(a, b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f95f924b-b39e-4677-9407-330d3fb3ef84",
   "metadata": {},
   "source": [
    "<h2>Broadcasting in NumPy</h2>\n",
    "<p>a powerful mechanism that allows NumPy to work with arrays of different shapes when performing arithmetic operations. It automatically expands smaller arrays to match the shape of larger arrays without making copies of the data. This enables efficient operations between arrays of different sizes.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa3c1a60-a0a4-4bf8-acdf-bf2e2ee55359",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a + b = [1 2 3 4] + [10] = [11 12 13 14]\n"
     ]
    }
   ],
   "source": [
    "a = np.array([1, 2, 3, 4])\n",
    "b = np.array([10])\n",
    "c = a + b  # b is broadcast to match a's shape\n",
    "# c becomes [11, 12, 13, 14]\n",
    "print(f'a + b = {a} + {b} = {c}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94d28730-c051-43b1-80fb-13a72cd220f1",
   "metadata": {},
   "source": [
    "<h2>ufun - universal functions</h2>\n",
    "<p>A ufunc is a function that operates element-wise on array inputs. These functions are vectorized and optimized for performance. NumPy provides many built-in ufuncs, and you can also create custom ones.</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d4bacde-c140-425e-8387-793f8ef872f9",
   "metadata": {},
   "source": [
    "<h2>Follow along</h2>\n",
    "<p>We will follow along now with the ZTM's introduction to AI course. Everything above was based on a conversation I had with Claude AI.</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6624fb59-0547-4ae1-a1c5-30c9a139fedf",
   "metadata": {},
   "source": [
    "<h2>Notes</h2>\n",
    "<ul>\n",
    "    <li><b>Main datatype: </b> The main datatype is ndarray</li>\n",
    "    <li><b>ndarray (n-dimensional array):</b> n-dimensions indicate it can be any shape you can imagine and array's can be a list of numbers too.\n",
    "    </li>\n",
    "    <li><b>numpy.shape</b> can be shown as it is here</li>\n",
    "</ul>\n",
    "![anatomy of a numpy array](C:\\Users\\marka\\ZTM\\ZTM_AI\\capstone_project\\sample_project1\\NumPy\\anatomy-of-a-numpy-array.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "44dec213-d871-43b5-a7a2-3eec78fdabc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ndarray demo\n",
    "a1 = np.array([1, 2, 3])  # pass a list of numbers\n",
    "a1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6302c927-b631-457e-8eed-fc5c5c37182a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(a1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "097eca50-bcc1-4ddf-a5cf-22b0dd7fbbbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "a2 = np.array([\n",
    "                [1, 2.0, 3.3], \n",
    "                [4, 5, 6.5]\n",
    "            ])\n",
    "\n",
    "a3 = np.array([[[1, 2, 3],\n",
    "                [4, 5, 6]],\n",
    "               [[7, 8, 9],\n",
    "                [10, 11, 12]],\n",
    "               [[13, 14, 15],\n",
    "                [16, 17, 18]]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f32899fd-147d-4df9-b23a-91e390c8e82b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1. , 2. , 3.3],\n",
       "       [4. , 5. , 6.5]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "567aadc8-3a84-4707-ae65-fbc4ba1b54a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 1,  2,  3],\n",
       "        [ 4,  5,  6]],\n",
       "\n",
       "       [[ 7,  8,  9],\n",
       "        [10, 11, 12]],\n",
       "\n",
       "       [[13, 14, 15],\n",
       "        [16, 17, 18]]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1bc8fd50-8558-42d4-b95b-801d6523c378",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3,)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " a1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "68ca0be9-80c5-48fc-8dcc-2245fda62bea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 3)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "88e74fec-835f-48bf-9ca4-28d9acc9c14b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 2, 3)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e96a4956-b647-4293-b7f7-9ff084465f98",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
